<?php

/**
 * This is the model base class for the table "wp_foundboxvideos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Foundboxvideos".
 *
 * Columns in table "wp_foundboxvideos" available as properties of the model,
 * followed by relations of table "wp_foundboxvideos" available as properties of the model.
 *
 * @property string $id
 * @property string $date_created
 * @property string $title
 * @property string $description
 * @property string $vid_src_url
 * @property string $vid_flv_path
 * @property string $vid_src_id
 * @property string $vid_thumb_url
 * @property string $wp_foundbox_id
 * @property integer $wp_service_id
 *
 * @property Foundbox $wpFoundbox
 * @property Service $wpService
 */
abstract class BaseFoundboxvideos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'wp_foundboxvideos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'FoundBox Videos|FoundBox Videos', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			//array('title, description, vid_src_url, vid_flv_path, vid_src_id, vid_thumb_url, wp_foundbox_id, wp_service_id', 'required'),
			//, vid_src_url, vid_flv_path, vid_src_id, vid_thumb_url, wp_foundbox_id
                        //array('wp_service_id', 'numerical', 'integerOnly'=>true),
		        array('title, description, vid_src_url, vid_flv_path, vid_src_id, vid_thumb_url, wp_foundbox_id', 'required'),
                        array('title, vid_src_url, vid_flv_path, vid_src_id, vid_thumb_url', 'length', 'max'=>250),
			array('wp_foundbox_id', 'length', 'max'=>20),
			array('id, date_created, title, description, vid_src_url, vid_flv_path, vid_src_id, vid_thumb_url, wp_foundbox_id, wp_service_id', 'safe', 'on'=>'search'),
                        
		);
	}

	public function relations() {
		return array(
			'wpFoundbox' => array(self::BELONGS_TO, 'Foundbox', 'wp_foundbox_id'),
			'wpService' => array(self::BELONGS_TO, 'Service', 'wp_service_id'),
                    
                     ); 
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'date_created' => Yii::t('app', 'Date Created'),
			'title' => Yii::t('app', 'Title'),
			'description' => Yii::t('app', 'Description'),
			'vid_src_url' => Yii::t('app', 'Vid Src Url'),
			'vid_flv_path' => Yii::t('app', 'Vid Flv Path'),
			'vid_src_id' => Yii::t('app', 'Vid Src'),
			'vid_thumb_url' => Yii::t('app', 'Vid Thumb Url'),
			
			'wp_foundbox_id' => null,
			'wp_service_id' => null,
			'wpFoundbox' => null,
			'wpService' => null,
		);
	}

	public function search() {
		
                
                
                $criteria = new CDbCriteria;
		$criteria->compare('t.id', $this->id, true);
		$criteria->compare('t.date_created', $this->date_created, true);
		$criteria->compare('t.title', $this->title, true);
		$criteria->compare('t.description', $this->description, true);
		$criteria->compare('t.vid_src_url', $this->vid_src_url, true);
		$criteria->compare('t.vid_flv_path', $this->vid_flv_path, true);
		$criteria->compare('t.vid_src_id', $this->vid_src_id, true);
		$criteria->compare('t.vid_thumb_url', $this->vid_thumb_url, true);
		if(Yii::app()->user->name=="admin"){
                    
              //  $criteria->compare('t.wp_foundbox_id', $this->wp_foundbox_id,true);
		
                }
               else{     
               
               
                   
               $criteria->together = true;
               $criteria->with = array('wpFoundbox');
               //$criteria->addSearchCondition('wpFoundbox.wp_users_ID', Yii::app()->user->id, true,'AND','LIKE');
               $criteria->compare('wpFoundbox.wp_users_ID', Yii::app()->user->id, true);
			    $criteria->compare('t.wp_foundbox_id', $this->wp_foundbox_id,true);
               //$criteria->condition = 'wp_users_ID='.Yii::app()->user->id;
               //$criteria->compare('wp_foundbox_id', $this->wp_foundbox_id,true);

               }
               $criteria->compare('t.wp_service_id', $this->wp_service_id,true);

                return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}